<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>观山的世界</title>
    <link>http://vrcoder.github.io/</link>
    <description>Recent content on 观山的世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Jun 2016 22:03:16 +0800</lastBuildDate>
    <atom:link href="http://vrcoder.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>rtmp服务器搭建以及推流程序demo</title>
      <link>http://vrcoder.github.io/2016/06/rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%8E%A8%E6%B5%81%E7%A8%8B%E5%BA%8Fdemo/</link>
      <pubDate>Tue, 21 Jun 2016 22:03:16 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/2016/06/rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%8E%A8%E6%B5%81%E7%A8%8B%E5%BA%8Fdemo/</guid>
      <description>

&lt;p&gt;汇总下前段时间用的工具：使用开源程序SRS和ffmpeg搭建推流程序的demo。&lt;/p&gt;

&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux服务器一台&lt;/li&gt;
&lt;li&gt;git（apt-get or yum install git）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/smartdu/srs&#34;&gt;srs开源程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ffmpeg.org/download.html&#34;&gt;ffmpeg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装srs&#34;&gt;安装srs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;git &lt;a href=&#34;https://github.com/smartdu/srs.git&#34;&gt;https://github.com/smartdu/srs.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd srs/trunk&lt;/li&gt;
&lt;li&gt;./configure &amp;amp;&amp;amp; make&lt;/li&gt;
&lt;li&gt;./objs/srs -c conf/srs.conf&lt;/li&gt;
&lt;li&gt;其他详见项目&lt;a href=&#34;https://github.com/ossrs/srs/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;安装ffmpeg&#34;&gt;安装ffmpeg&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;git clone &lt;a href=&#34;https://git.ffmpeg.org/ffmpeg.git&#34;&gt;https://git.ffmpeg.org/ffmpeg.git&lt;/a&gt; ffmpeg&lt;/li&gt;
&lt;li&gt;安装yasm(apt-get or yum install yasm)&lt;/li&gt;
&lt;li&gt;./configure &amp;ndash;enable-shared &amp;ndash;prefix=/usr/local/ffmpeg&lt;/li&gt;
&lt;li&gt;make &amp;amp;&amp;amp; make install&lt;/li&gt;
&lt;li&gt;vim /etc/ld.so.conf.d/libc.conf,添加/usr/local/ffmpeg/lib
路径根据不同系统可能有差异&lt;/li&gt;
&lt;li&gt;ldconfig,使上面的改动生效&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;推流demo&#34;&gt;推流demo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/article/details/47056051&#34;&gt;代码来自雷霄骅博士的博客&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/**
 * 最简单的基于FFmpeg的推流器（推送RTMP）
 * Simplest FFmpeg Streamer (Send RTMP)
 * 
 * 雷霄骅 Lei Xiaohua
 * leixiaohua1020@126.com
 * 中国传媒大学/数字电视技术
 * Communication University of China / Digital TV Technology
 * http://blog.csdn.net/leixiaohua1020
 * 
 * 本例子实现了推送本地视频至流媒体服务器（以RTMP为例）。
 * 是使用FFmpeg进行流媒体推送最简单的教程。
 *
 * This example stream local media files to streaming media 
 * server (Use RTMP as example). 
 * It&#39;s the simplest FFmpeg streamer.
 * 
 */

#include &amp;lt;stdio.h&amp;gt;

#define __STDC_CONSTANT_MACROS

#ifdef _WIN32
//Windows
extern &amp;quot;C&amp;quot;
{
#include &amp;quot;libavformat/avformat.h&amp;quot;
#include &amp;quot;libavutil/mathematics.h&amp;quot;
#include &amp;quot;libavutil/time.h&amp;quot;
};
#else
//Linux...
#ifdef __cplusplus
extern &amp;quot;C&amp;quot;
{
#endif
#include &amp;lt;libavformat/avformat.h&amp;gt;
#include &amp;lt;libavutil/mathematics.h&amp;gt;
#include &amp;lt;libavutil/time.h&amp;gt;
#ifdef __cplusplus
};
#endif
#endif

int main(int argc, char* argv[])
{
	AVOutputFormat *ofmt = NULL;
	//输入对应一个AVFormatContext，输出对应一个AVFormatContext
	//（Input AVFormatContext and Output AVFormatContext）
	AVFormatContext *ifmt_ctx = NULL, *ofmt_ctx = NULL;
	AVPacket pkt;
	const char *in_filename, *out_filename;
	int ret, i;
	int videoindex=-1;
	int frame_index=0;
	int64_t start_time=0;
	//in_filename  = &amp;quot;cuc_ieschool.mov&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.mkv&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.ts&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.mp4&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.h264&amp;quot;;
	in_filename  = &amp;quot;cuc_ieschool.flv&amp;quot;;//输入URL（Input file URL）
	//in_filename  = &amp;quot;shanghai03_p.h264&amp;quot;;
	
	out_filename = &amp;quot;rtmp://localhost/publishlive/livestream&amp;quot;;//输出 URL（Output URL）[RTMP]
	//out_filename = &amp;quot;rtp://233.233.233.233:6666&amp;quot;;//输出 URL（Output URL）[UDP]

	av_register_all();
	//Network
	avformat_network_init();
	//输入（Input）
	if ((ret = avformat_open_input(&amp;amp;ifmt_ctx, in_filename, 0, 0)) &amp;lt; 0) {
		printf( &amp;quot;Could not open input file.&amp;quot;);
		goto end;
	}
	if ((ret = avformat_find_stream_info(ifmt_ctx, 0)) &amp;lt; 0) {
		printf( &amp;quot;Failed to retrieve input stream information&amp;quot;);
		goto end;
	}

	for(i=0; i&amp;lt;ifmt_ctx-&amp;gt;nb_streams; i++) 
		if(ifmt_ctx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type==AVMEDIA_TYPE_VIDEO){
			videoindex=i;
			break;
		}

	av_dump_format(ifmt_ctx, 0, in_filename, 0);

	//输出（Output）
	
	avformat_alloc_output_context2(&amp;amp;ofmt_ctx, NULL, &amp;quot;flv&amp;quot;, out_filename); //RTMP
	//avformat_alloc_output_context2(&amp;amp;ofmt_ctx, NULL, &amp;quot;mpegts&amp;quot;, out_filename);//UDP

	if (!ofmt_ctx) {
		printf( &amp;quot;Could not create output context\n&amp;quot;);
		ret = AVERROR_UNKNOWN;
		goto end;
	}
	ofmt = ofmt_ctx-&amp;gt;oformat;
	for (i = 0; i &amp;lt; ifmt_ctx-&amp;gt;nb_streams; i++) {
		//根据输入流创建输出流（Create output AVStream according to input AVStream）
		AVStream *in_stream = ifmt_ctx-&amp;gt;streams[i];
		AVStream *out_stream = avformat_new_stream(ofmt_ctx, in_stream-&amp;gt;codec-&amp;gt;codec);
		if (!out_stream) {
			printf( &amp;quot;Failed allocating output stream\n&amp;quot;);
			ret = AVERROR_UNKNOWN;
			goto end;
		}
		//复制AVCodecContext的设置（Copy the settings of AVCodecContext）
		ret = avcodec_copy_context(out_stream-&amp;gt;codec, in_stream-&amp;gt;codec);
		if (ret &amp;lt; 0) {
			printf( &amp;quot;Failed to copy context from input to output stream codec context\n&amp;quot;);
			goto end;
		}
		out_stream-&amp;gt;codec-&amp;gt;codec_tag = 0;
		if (ofmt_ctx-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_GLOBALHEADER)
			out_stream-&amp;gt;codec-&amp;gt;flags |= CODEC_FLAG_GLOBAL_HEADER;
	}
	//Dump Format------------------
	av_dump_format(ofmt_ctx, 0, out_filename, 1);
	//打开输出URL（Open output URL）
	if (!(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) {
		ret = avio_open(&amp;amp;ofmt_ctx-&amp;gt;pb, out_filename, AVIO_FLAG_WRITE);
		if (ret &amp;lt; 0) {
			printf( &amp;quot;Could not open output URL &#39;%s&#39;&amp;quot;, out_filename);
			goto end;
		}
	}
	//写文件头（Write file header）
	ret = avformat_write_header(ofmt_ctx, NULL);
	if (ret &amp;lt; 0) {
		printf( &amp;quot;Error occurred when opening output URL\n&amp;quot;);
		goto end;
	}

	start_time=av_gettime();
	while (1) {
		AVStream *in_stream, *out_stream;
		//获取一个AVPacket（Get an AVPacket）
		ret = av_read_frame(ifmt_ctx, &amp;amp;pkt);
		if (ret &amp;lt; 0)
			break;
		//FIX：No PTS (Example: Raw H.264)
		//Simple Write PTS
		if(pkt.pts==AV_NOPTS_VALUE){
			//Write PTS
			AVRational time_base1=ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;time_base;
			//Duration between 2 frames (us)
			int64_t calc_duration=(double)AV_TIME_BASE/av_q2d(ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;r_frame_rate);
			//Parameters
			pkt.pts=(double)(frame_index*calc_duration)/(double)(av_q2d(time_base1)*AV_TIME_BASE);
			pkt.dts=pkt.pts;
			pkt.duration=(double)calc_duration/(double)(av_q2d(time_base1)*AV_TIME_BASE);
		}
		//Important:Delay
		if(pkt.stream_index==videoindex){
			AVRational time_base=ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;time_base;
			AVRational time_base_q={1,AV_TIME_BASE};
			int64_t pts_time = av_rescale_q(pkt.dts, time_base, time_base_q);
			int64_t now_time = av_gettime() - start_time;
			if (pts_time &amp;gt; now_time)
				av_usleep(pts_time - now_time);

		}

		in_stream  = ifmt_ctx-&amp;gt;streams[pkt.stream_index];
		out_stream = ofmt_ctx-&amp;gt;streams[pkt.stream_index];
		/* copy packet */
		//转换PTS/DTS（Convert PTS/DTS）
		pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.duration = av_rescale_q(pkt.duration, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base);
		pkt.pos = -1;
		//Print to Screen
		if(pkt.stream_index==videoindex){
			printf(&amp;quot;Send %8d video frames to output URL\n&amp;quot;,frame_index);
			frame_index++;
		}
		//ret = av_write_frame(ofmt_ctx, &amp;amp;pkt);
		ret = av_interleaved_write_frame(ofmt_ctx, &amp;amp;pkt);

		if (ret &amp;lt; 0) {
			printf( &amp;quot;Error muxing packet\n&amp;quot;);
			break;
		}
		
		av_free_packet(&amp;amp;pkt);
		
	}
	//写文件尾（Write file trailer）
	av_write_trailer(ofmt_ctx);
end:
	avformat_close_input(&amp;amp;ifmt_ctx);
	/* close output */
	if (ofmt_ctx &amp;amp;&amp;amp; !(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE))
		avio_close(ofmt_ctx-&amp;gt;pb);
	avformat_free_context(ofmt_ctx);
	if (ret &amp;lt; 0 &amp;amp;&amp;amp; ret != AVERROR_EOF) {
		printf( &amp;quot;Error occurred.\n&amp;quot;);
		return -1;
	}
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单写个Makefile来编译下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCPATH=-I /usr/local/ffmpeg/include
LIBPATH=-L /usr/local/ffmpeg/lib
FLAGS=-lavformat -lavcodec -lavutil

all:
        gcc simplest_ffmpeg_streamer.cpp -g -o main $(INCPATH) $(LIBPATH) $(FLAGS)
clean:
        rm -rf main

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>怎样让一个正常人理解【线性代数】</title>
      <link>http://vrcoder.github.io/2016/06/%E6%80%8E%E6%A0%B7%E8%AE%A9%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%B8%B8%E4%BA%BA%E7%90%86%E8%A7%A3%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</link>
      <pubDate>Sat, 11 Jun 2016 20:24:30 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/2016/06/%E6%80%8E%E6%A0%B7%E8%AE%A9%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%B8%B8%E4%BA%BA%E7%90%86%E8%A7%A3%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</guid>
      <description>

&lt;p&gt;线性代数课程，无论你从行列式入手还是直接从矩阵入手，从一开始就充斥着莫名其妙。比如说，在全国一般工科院系教学中应用最广泛的同济线性代数教材（现在到了第四版），一上来就介绍&lt;code&gt;逆序数&lt;/code&gt;这个“前无古人，后无来者”的古怪概念，然后用逆序数给出行列式的一个极不直观的定义，接着是一些简直犯傻的行列式性质和习题——把这行乘一个系数加到另一行上，再把那一列减过来，折腾得那叫一个热闹，可就是压根看不出这个东西有嘛用。&lt;/p&gt;

&lt;p&gt;大多数像我一样资质平庸的学生到这里就有点犯晕：连这是个什么东西都模模糊糊的，就开始钻火圈表演了，这未免太“无厘头”了吧！于是开始有人逃课，更多的人开始抄作业。这下就中招了，因为其后的发展可以用一句峰回路转来形容，紧跟着这个无厘头的行列式的，是一个同样无厘头但是伟大的无以复加的家伙的出场——&lt;code&gt;矩阵&lt;/code&gt;来了！&lt;/p&gt;

&lt;p&gt;多年之后，我才明白，当老师犯傻似地用中括号把一堆傻了吧叽的数括起来，并且不紧不慢地说：“这个东西叫做矩阵”的时候，我的数学生涯掀开了何等悲壮辛酸、惨绝人寰的一幕！自那以后，在几乎所有跟“学问”二字稍微沾点边的东西里，矩阵这个家伙从不缺席。对于我这个没能一次搞定线性代数的笨蛋来说，矩阵老大的不请自来每每搞得我灰头土脸，头破血流。长期以来，我在阅读中一见矩阵，就如同阿Q见到了假洋鬼子，揉揉额角就绕道走。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;事实上，我并不是特例。一般工科学生初学线性代数，通常都会感到困难。这种情形在国内外皆然。瑞典数学家Lars
Garding在其名著《Encounter with Mathematics》中说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果不熟悉线性代数的概念，要去学习自然科学，现在看来就和文盲差不多。然而按照现行的国际标准，线性代数是通过公理化来表述的，它是第二代数学模型，这就带来了教学上的困难。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;事实上，当我们开始学习线性代数的时候，不知不觉就进入了&lt;strong&gt;第二代数学模型&lt;/strong&gt;的范畴当中，这意味着数学的表述方式和抽象性有了一次全面的进化，对于从小一直在&lt;strong&gt;第一代数学模型&lt;/strong&gt;，即以实用为导向的、具体的数学模型中学习的我们来说，在没有并明确告知的情况下进行如此剧烈的paradigm
shift，不感到困难才是奇怪的。&lt;/p&gt;

&lt;p&gt;大部分工科学生，往往是在学习了一些后继课程，如数值分析、数学规划、矩阵论之后，才逐渐能够理解和熟练运用线性代数。即便如此，不少人即使能够很熟练地以线性代数为工具进行科研和应用工作，但对于很多这门课程的初学者提出的、看上去是很基础的问题却并不清楚。比如说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;矩阵究竟是什么东西？向量可以被认为是具有n个相互独立的性质（维度）的对象的表示，矩阵又是什么呢？我们如果认为矩阵是一组列（行）向量组成的新的复合向量的展开式，那么为什么这种展开式具有如此广泛的应用？特别是，为什么偏偏二维的展开式如此有用？如果矩阵中每一个元素又是一个向量，那么我们再展开一次，变成三维的立方阵，是不是更有用？&lt;/li&gt;
&lt;li&gt;矩阵的乘法规则究竟为什么这样规定？为什么这样一种怪异的乘法规则却能够在实践中发挥如此巨大的功效？很多看上去似乎是完全不相关的问题，最后竟然都归结到矩阵的乘法，这难道不是很奇妙的事情？难道在矩阵乘法那看上去莫名其妙的规则下面，包含着世界的某些本质规律？如果是的话，这些本质规律是什么？&lt;/li&gt;
&lt;li&gt;行列式究竟是一个什么东西？为什么会有如此怪异的计算规则？行列式与其对应方阵本质上是什么关系？为什么只有方阵才有对应的行列式，而一般矩阵就没有（不要觉得这个问题很蠢，如果必要，针对m*n矩阵定义行列式不是做不到的，之所以不做，是因为没有这个必要，但是为什么没有这个必要）？而且，行列式的计算规则，看上去跟矩阵的任何计算规则都没有直观的联系，为什么又在很多方面决定了矩阵的性质？难道这一切仅是巧合？&lt;/li&gt;
&lt;li&gt;矩阵为什么可以分块计算？分块计算这件事情看上去是那么随意，为什么竟是可行的？&lt;/li&gt;
&lt;li&gt;对于矩阵转置运算$$A^T$$ 有 $$(AB)^T = B^TA^T$$ 对于矩阵求逆运算$$A^{-1}$$ 有$$(AB)^{-1} = B^{-1}A^{-1}$$。两个看上去完全没有什么关系的运算，为什么有着类似的性质？这仅仅是巧合吗？&lt;/li&gt;
&lt;li&gt;为什么说$$P^{-1}AP$$得到的矩阵与A矩阵“相似”？这里的“相似”是什么意思？&lt;/li&gt;
&lt;li&gt;特征值和特征向量的本质是什么？它们定义就让人很惊讶，因为$$Ax=λx$$，一个诺大的矩阵的效应，竟然不过相当于一个小小的数λ，确实有点奇妙。但何至于用“特征”甚至“本征”来界定？它们刻划的究竟是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样的一类问题，经常让使用线性代数已经很多年的人都感到为难。就好像大人面对小孩子的刨根问底，最后总会迫不得已地说“就这样吧，到此为止”一样，面对这样的问题，很多老手们最后也只能用：“就是这么规定的，你接受并且记住就好”来搪塞。然而，这样的问题如果不能获得回答，线性代数对于我们来说就是一个粗暴的、不讲道理的、莫名其妙的规则集合，我们会感到，自己并不是在学习一门学问，而是被不由分说地“抛到”一个强制的世界中，只是在考试的皮鞭挥舞之下被迫赶路，全然无法领略其中的美妙、和谐与统一。直到多年以后，我们已经发觉这门学问如此的有用，却仍然会非常迷惑：怎么这么凑巧？&lt;/p&gt;

&lt;p&gt;我认为，这是我们的线性代数教学中直觉性丧失的后果。上述这些涉及到“如何能”、“怎么会”的问题，仅仅通过纯粹的数学证明来回答，是不能令提问者满意的。比如，如果你通过一般的证明方法论证了矩阵分块运算确实可行，那么这并不能够让提问者的疑惑得到解决。他们真正的困惑是：矩阵分块运算为什么竟然是可行的？究竟只是凑巧，还是说这是由矩阵这种对象的某种本质所必然决定的？如果是后者，那么矩阵的这些本质是什么？只要对上述那些问题稍加考虑，我们就会发现，所有这些问题都不是单纯依靠数学证明所能够解决的。像我们的教科书那样，凡事用数学证明，最后培养出来的学生，只能熟练地使用工具，却欠缺真正意义上的理解。&lt;/p&gt;

&lt;p&gt;自从1930年代法国布尔巴基学派兴起以来，数学的公理化、系统性描述已经获得巨大的成功，这使得我们接受的数学教育在严谨性上大大提高。然而数学公理化的一个备受争议的副作用，就是一般数学教育中直觉性的丧失。数学家们似乎认为直觉性与抽象性是矛盾的，因此毫不犹豫地牺牲掉前者。然而包括我本人在内的很多人都对此表示怀疑，我们不认为直觉性与抽象性一定相互矛盾，特别是在数学教育中和数学教材中，帮助学生建立直觉，有助于它们理解那些抽象的概念，进而理解数学的本质。反之，如果一味注重形式上的严格性，学生就好像被迫进行钻火圈表演的小白鼠一样，变成枯燥的规则的奴隶。&lt;/p&gt;

&lt;p&gt;对于线性代数的类似上述所提到的一些直觉性的问题，两年多来我断断续续地反复思考了四、五次，为此阅读了好几本国内外线性代数、数值分析、代数和数学通论性书籍，其中像前苏联的名著《数学：它的内容、方法和意义》、龚昇教授的《线性代数五讲》、前面提到的Encounter
with Mathematics（《数学概观》）以及Thomas A. Garrity的《数学拾遗》都给我很大的启发。不过即使如此，我对这个主题的认识也经历了好几次自我否定。比如以前思考的一些结论曾经写在自己的blog里，但是现在看来，这些结论基本上都是错误的。因此打算把自己现在的有关理解比较完整地记录下来，一方面是因为我觉得现在的理解比较成熟了，可以拿出来与别人探讨，向别人请教。另一方面，如果以后再有进一步的认识，把现在的理解给推翻了，那现在写的这个snapshot也是很有意义的。&lt;/p&gt;

&lt;p&gt;因为打算写得比较多，所以会分几次慢慢写。也不知道是不是有时间慢慢写完整，会不会中断，写着看吧。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;今天先谈谈对线形空间和矩阵的几个核心概念的理解。这些东西大部分是凭着自己的理解写出来的，基本上不抄书，可能有错误的地方，希望能够被指出。但我希望做到直觉，也就是说能把数学背后说的实质问题说出来。&lt;/p&gt;

&lt;h2 id=&#34;什么是空间&#34;&gt;什么是空间&lt;/h2&gt;

&lt;p&gt;首先说说空间(space)，这个概念是现代数学的命根子之一，从拓扑空间开始，一步步往上加定义，可以形成很多空间。线性空间其实还是比较初级的，如果在里面定义了范数，就成了赋范线性空间。赋范线性空间满足完备性，就成了巴那赫空间；赋范线性空间中定义角度，就有了内积空间，内积空间再满足完备性，就得到希尔伯特空间。&lt;/p&gt;

&lt;p&gt;总之，空间有很多种。你要是去看某种空间的数学定义，大致都是“存在一个集合，在这个集合上定义某某概念，然后满足某些性质”，就可以被称为空间。这未免有点奇怪，为什么要用“空间”来称呼一些这样的集合呢？大家将会看到，其实这是很有道理的。&lt;/p&gt;

&lt;p&gt;我们一般人最熟悉的空间，毫无疑问就是我们生活在其中的（按照牛顿的绝对时空观）的三维空间，从数学上说，这是一个三维的欧几里德空间，我们先不管那么多，先看看我们熟悉的这样一个空间有些什么最基本的特点。仔细想想我们就会知道，这个三维的空间：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;由很多（实际上是无穷多个）位置点组成；&lt;/li&gt;
&lt;li&gt;这些点之间存在相对的关系；&lt;/li&gt;
&lt;li&gt;可以在空间中定义长度、角度；&lt;/li&gt;
&lt;li&gt;这个空间可以容纳运动，这里我们所说的运动是从一个点到另一个点的移动（变换），而不是微积分意义上的“连续”性的运动，&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面的这些性质中，最最关键的是第4条。第1、2条只能说是空间的基础，不算是空间特有的性质，凡是讨论数学问题，都得有一个集合，大多数还得在这个集合上定义一些结构（关系），并不是说有了这些就算是空间。而第3条太特殊，其他的空间不需要具备，更不是关键的性质。只有第4条是空间的本质，也就是说，容纳运动是空间的本质特征。&lt;/p&gt;

&lt;p&gt;认识到了这些，我们就可以把我们关于三维空间的认识扩展到其他的空间。事实上，不管是什么空间，都必须容纳和支持在其中发生的符合规则的运动（变换）。你会发现，在某种空间中往往会存在一种相对应的变换，比如拓扑空间中有拓扑变换，线性空间中有线性变换，仿射空间中有仿射变换，其实这些变换都只不过是对应空间中允许的运动形式而已。&lt;/p&gt;

&lt;p&gt;因此只要知道，&lt;strong&gt;&lt;code&gt;空间&lt;/code&gt;是容纳运动的一个对象集合，而变换则规定了对应空间的运动。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;下面我们来看看线性空间。线性空间的定义任何一本书上都有，但是既然我们承认线性空间是个空间，那么有两个最基本的问题必须首先得到解决，那就是：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;空间是一个对象集合，线性空间也是空间，所以也是一个对象集合。那么线性空间是什么样的对象的集合？或者说，线性空间中的对象有什么共同点吗？&lt;/li&gt;
&lt;li&gt;线性空间中的运动如何表述的？也就是，线性变换是如何表示的？&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们先来回答第一个问题，回答这个问题的时候其实是不用拐弯抹角的，可以直截了当的给出答案。线性空间中的任何一个对象，通过选取基和坐标的办法，都可以表达为向量的形式。通常的向量空间我就不说了，举两个不那么平凡的例子：&lt;/p&gt;

&lt;p&gt;L1. 最高次项不大于n次的多项式的全体构成一个线性空间，也就是说，这个线性空间中的每一个对象是一个多项式。如果我们以 $$x_0,x_1, &amp;hellip;,x_n$$&lt;/p&gt;

&lt;p&gt;为基，那么任何一个这样的多项式都可以表达为一组n+1维向量，其中的每一个分量ai其实就是多项式中$$x_{i-1}$$项的系数。值得说明的是，基的选取有多种办法，只要所选取的那一组基线性无关就可以。这要用到后面提到的概念了，所以这里先不说，提一下而已。&lt;/p&gt;

&lt;p&gt;L2. 闭区间[a,b]上的n阶连续可微函数的全体，构成一个线性空间。也就是说，这个线性空间的每一个对象是一个连续函数。对于其中任何一个连续函数，根据魏尔斯特拉斯定理，一定可以找到最高次项不大于n的多项式函数，使之与该连续函数的差为0，也就是说，完全相等。这样就把问题归结为L1了。后面就不用再重复了。&lt;/p&gt;

&lt;p&gt;所以说，向量是很厉害的，只要你找到合适的基，用向量可以表示线性空间里任何一个对象。这里头大有文章，因为向量表面上只是一列数，但是其实由于它的有序性，所以除了这些数本身携带的信息之外，还可以在每个数的对应位置上携带信息。为什么在程序设计中数组最简单，却又威力无穷呢？根本原因就在于此。这是另一个问题了，这里就不说了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;什么是矩阵&#34;&gt;什么是矩阵&lt;/h2&gt;

&lt;p&gt;下面来回答第二个问题，这个问题的回答会涉及到线性代数的一个最根本的问题。&lt;/p&gt;

&lt;p&gt;线性空间中的运动，被称为线性变换。也就是说，你从线性空间中的一个点运动到任意的另外一个点，都可以通过一个线性变化来完成。那么，线性变换如何表示呢？很有意思，在线性空间中，当你选定一组基之后，不仅可以用一个向量来描述空间中的任何一个对象，而且可以用矩阵来描述该空间中的任何一个运动（变换）。而使某个对象发生对应运动的方法，就是用代表那个运动的矩阵，乘以代表那个对象的向量。&lt;/p&gt;

&lt;p&gt;简而言之，&lt;strong&gt;在线性空间中选定基之后，向量刻画对象，矩阵刻画对象的运动，用矩阵与向量的乘法施加运动。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;是的，矩阵的本质是运动的描述。如果以后有人问你矩阵是什么，那么你就可以响亮地告诉他，&lt;strong&gt;矩阵的本质是运动的描述。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可是多么有意思啊，向量本身不是也可以看成是n*1矩阵吗？这实在是很奇妙，一个空间中的对象和运动竟然可以用相类同的方式表示。能说这是巧合吗？如果是巧合的话，那可真是幸运的巧合！可以说，线性代数中大多数奇妙的性质，均与这个巧合有直接的关系。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;矩阵是运动的描述&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到现在为止，好像大家都还没什么意见。但是我相信早晚会有数学系出身的网友来拍板转。因为运动这个概念，在数学和物理里是跟微积分联系在一起的。我们学习微积分的时候，总会有人照本宣科地告诉你，&lt;strong&gt;初等数学是研究常量的数学，是研究静态的数学，高等数学是变量的数学，是研究运动的数学&lt;/strong&gt;。大家口口相传，差不多人人都知道这句话。但是真知道这句话说的是什么意思的人，好像也不多。简而言之，在我们人类的经验里，运动是一个连续过程，从A点到B点，就算走得最快的光，也是需要一个时间来逐点地经过AB之间的路径，这就带来了连续性的概念。而连续这个事情，如果不定义极限的概念，根本就解释不了。古希腊人的数学非常强，但就是缺乏极限观念，所以解释不了运动，被芝诺的那些著名悖论（飞箭不动、飞毛腿阿喀琉斯跑不过乌龟等四个悖论）搞得死去活来。因为这篇文章不是讲微积分的，所以我就不多说了。有兴趣的读者可以去看看齐民友教授写的《重温微积分》。我就是读了这本书开头的部分，才明白&lt;strong&gt;高等数学是研究运动的数学&lt;/strong&gt;这句话的道理。&lt;/p&gt;

&lt;p&gt;不过在我这个《理解矩阵》的文章里，“运动”的概念不是微积分中的连续性的运动，而是瞬间发生的变化。比如这个时刻在A点，经过一个“运动”，一下子就“跃迁”到了B点，其中不需要经过A点与B点之间的任何一个点。这样的“运动”，或者说“跃迁”，是违反我们日常的经验的。不过了解一点量子物理常识的人，就会立刻指出，量子（例如电子）在不同的能量级轨道上跳跃，就是瞬间发生的，具有这样一种跃迁行为。所以说，自然界中并不是没有这种运动现象，只不过宏观上我们观察不到。但是不管怎么说，“运动”这个词用在这里，还是容易产生歧义的，说得更确切些，应该是“跃迁”。因此这句话可以改成：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;矩阵是线性空间里跃迁的描述。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可是这样说又太物理，也就是说太具体，而不够数学，也就是说不够抽象。因此我们最后换用一个正牌的数学术语——变换，来描述这个事情。这样一说，大家就应该明白了，所谓变换，其实就是空间里从一个点（元素/对象）到另一个点（元素/对象）的跃迁。比如说，拓扑变换，就是在拓扑空间里从一个点到另一个点的跃迁。再比如说，仿射变换，就是在仿射空间里从一个点到另一个点的跃迁。附带说一下，这个仿射空间跟向量空间是亲兄弟。做计算机图形学的朋友都知道，尽管描述一个三维对象只需要三维向量，但所有的计算机图形学变换矩阵都是4x4的。说其原因，很多书上都写着“为了使用中方便”，这在我看来简直就是企图蒙混过关。真正的原因，是因为在计算机图形学里应用的图形变换，实际上是在仿射空间而不是向量空间中进行的。想想看，在向量空间里相一个向量平行移动以后仍是相同的那个向量，而现实世界等长的两个平行线段当然不能被认为同一个东西，所以计算机图形学的生存空间实际上是仿射空间。而仿射变换的矩阵表示根本就是4x 4的。又扯远了，有兴趣的读者可以去看《计算机图形学——几何工具算法详解》。&lt;/p&gt;

&lt;p&gt;一旦我们理解了“变换”这个概念，矩阵的定义就变成：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;矩阵是线性空间里的变换的描述。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到这里为止，我们终于得到了一个看上去比较数学的定义。不过还要多说几句。教材上一般是这么说的，在一个线性空间V里的一个线性变换T，当选定一组基之后，就可以表示为矩阵。因此我们还要说清楚到底什么是线性变换，什么是基，什么叫选定一组基。线性变换的定义是很简单的，
&amp;gt;设有一种变换T，使得对于线性空间V中间任何两个不相同的对象x和y，以及任意实数a和b，有：
$$T(ax + by) = aT(x) + bT(y)$$&lt;/p&gt;

&lt;p&gt;那么就称T为线性变换。&lt;/p&gt;

&lt;p&gt;定义都是这么写的，但是光看定义还得不到直觉的理解。线性变换究竟是一种什么样的变换？我们刚才说了，变换是从空间的一个点跃迁到另一个点，而线性变换，就是从一个线性空间V的某一个点跃迁到另一个线性空间W的另一个点的运动。这句话里蕴含着一层意思，就是说一个点不仅可以变换到同一个线性空间中的另一个点，而且可以变换到另一个线性空间中的另一个点去。不管你怎么变，只要变换前后都是线性空间中的对象，这个变换就一定是线性变换，也就一定可以用一个非奇异矩阵来描述。而你用一个非奇异矩阵去描述的一个变换，一定是一个线性变换。有的人可能要问，这里为什么要强调非奇异矩阵？所谓非奇异，只对方阵有意义，那么非方阵的情况怎么样？这个说起来就会比较冗长了，最后要把线性变换作为一种映射，并且讨论其映射性质，以及线性变换的核与像等概念才能彻底讲清楚。我觉得这个不算是重点，如果确实有时间的话，以后写一点。以下我们只探讨最常用、最有用的一种变换，就是在同一个线性空间之内的线性变换。也就是说，下面所说的矩阵，不作说明的话，就是方阵，而且是非奇异方阵。学习一门学问，最重要的是把握主干内容，迅速建立对于这门学问的整体概念，不必一开始就考虑所有的细枝末节和特殊情况，自乱阵脚。&lt;/p&gt;

&lt;p&gt;接着往下说，什么是基呢？这个问题在后面还要大讲一番，这里只要把基看成是&lt;code&gt;线性空间里的坐标系&lt;/code&gt;就可以了。注意是&lt;code&gt;坐标系&lt;/code&gt;，不是&lt;code&gt;坐标值&lt;/code&gt;，这两者可是一个“对立矛盾统一体”。这样一来，&lt;strong&gt;“选定一组基”就是说在线性空间里选定一个坐标系&lt;/strong&gt;。就这意思。&lt;/p&gt;

&lt;p&gt;好，最后我们把矩阵的定义完善如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;矩阵是线性空间中的线性变换的一个描述。在一个线性空间中，只要我们选定一组基，那么对于任何一个线性变换，都能够用一个确定的矩阵来加以描述。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;理解这句话的关键，在于把“线性变换”与“线性变换的一个描述”区别开。一个是那个对象，一个是对那个对象的表述。就好像我们熟悉的面向对象编程中，一个对象可以有多个引用，每个引用可以叫不同的名孪片面的的描述，因为换一个镜头位置给这头猪拍照，能得到一张不同的照片，也是这头猪的另一个片面的描述。所有这样照出来的照片都是这同一头猪的描述，但是又都不是这头猪本身。&lt;/p&gt;

&lt;p&gt;同样的，对于一个线性变换，只要你选定¢的两个不同的描述（之所以会不同，是因为选定了不同的基，也就是选定了不同的坐标系），则一定能找到一个非奇异矩阵P，使得A、B之间满足这样的关系：
$$A = P^{-1}BP$$&lt;/p&gt;

&lt;p&gt;线性代数稍微熟一点的读者一下就看出来，这就是&lt;code&gt;相似矩阵&lt;/code&gt;的定义。没错，**所谓相似矩阵，就昵论、矩阵分析等课程，其中讲了各种各样的相似变换，比如什么相似标准型，对角化之类的内容，都要求变换以后得到的那个矩阵与先前的那个矩阵式相似的，为什么这么要求？因为只有这样要求，才能保证变换前后的两个矩阵是描述同一个线性变换的。当然，同一个线性变换的不同矩阵描述，从实际运算性质来看并不是不分好环的。有些描述矩阵就比其他的矩阵性质好得多。这很容易理解，同一头猪的照片也有美丑之分嘛。所以矩阵的相伵，不但可以把线性空间中的一个点给变换到另一个点去，而且也能够把线性空间中的一个坐标系（基）表换到另一个坐标系（基）去。而且，变换点与变换坐标系，具有异曲同工的效果。线性代数里最有趣的奥妙，就蕴含在其中。理解了这些内容，线性代数里很多定理和规则会变得更加清晰、直觉。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;首先来总结一下前面两部分的一些主要结论：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;首先有空间，空间可以容纳对象运动的。一种空间对应一类对象。&lt;/li&gt;
&lt;li&gt;有一种空间叫线性空间，线性空间是容纳向量对象运动的。&lt;/li&gt;
&lt;li&gt;运动是瞬时的，因此也被称为变换。&lt;/li&gt;
&lt;li&gt;矩阵是线性空间中运动（变换）的描述。&lt;/li&gt;
&lt;li&gt;矩阵与向量相乘，就是实施运动（变换）的过程。&lt;/li&gt;
&lt;li&gt;同一个变换，在不同的坐标系下表现为不同的矩阵，但是它们的本质是一样的，所以本征值相同。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;下面让我们把视力集中到一点以改变我们以往看待矩阵的方式。我们知道，线性空间里的基本对象是向量，而向量是这么表示的：&lt;/p&gt;

&lt;p&gt;$$
 [a_1, a_2, a_3, &amp;hellip;, a_n]
 $$&lt;/p&gt;

&lt;p&gt;矩阵呢？矩阵是这么表示的：&lt;/p&gt;

&lt;p&gt;$$
\left[
\begin{matrix}
 a11      &amp;amp; a12      &amp;amp; \cdots &amp;amp; a1n   &lt;br /&gt;
 a21      &amp;amp; a22     &amp;amp; \cdots &amp;amp; a2n    &lt;br /&gt;
 \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots    &lt;br /&gt;
 an1      &amp;amp; an2     &amp;amp; \cdots &amp;amp; ann    &lt;br /&gt;
\end{matrix}
\right]
$$&lt;/p&gt;

&lt;p&gt;不用太聪明，我们就能看出来，矩阵是一组向量组成的。特别的，n维线性空间里的方阵是由n个n维向量组成的。我们在这里只讨论这个n阶的、非奇异的方阵，因为理解它就是理解矩阵的关键，它才是一般情况，而其他矩阵都是意外，都是不得不对付的讨厌状况，大可以放在一边。这里多一句嘴，&lt;strong&gt;学习东西要抓住主流，不要纠缠于旁支末节&lt;/strong&gt;。很可惜我们的教材课本大多数都是把主线埋没在细节中的，搞得大家还没明白怎么回事就先被灌晕了。比如数学分析，明明最要紧的观念是说，&lt;strong&gt;一个对象可以表达为无穷多个合理选择的对象的线性和&lt;/strong&gt;，这个概念是贯穿始终的，也是数学分析的精华。但是课本里自始至终不讲这句话，反正就是让你做吉米多维奇，掌握一大堆解偏题的技巧，记住各种特殊情况，两类间断点，怪异的可微和可积条件（谁还记得柯西条件、迪里赫莱条件&amp;hellip;？），最后考试一过，一切忘光光。要我说，还不如反复强调这一个事情，把它深深刻在脑子里，别的东西忘了就忘了，真碰到问题了，再查数学手册嘛，何必因小失大呢？&lt;/p&gt;

&lt;p&gt;言归正传。如果一组向量是彼此线性无关的话，那么它们就可以成为度量这个线性空间的一组基，从而事实上成为一个坐标系体系，其中每一个向量都躺在一根坐标轴上，并且成为那根坐标轴上的基本度量单位（长度1）。&lt;/p&gt;

&lt;p&gt;现在到了关键的一步。看上去矩阵就是由一组向量组成的，而且如果矩阵非奇异的话（我说了，只考虑这种情况），那么组成这个矩阵的那一组向量也就是线性无关的了，也就可以成为度量线性空间的一个坐标系。结论：&lt;strong&gt;矩阵描述了一个坐标系&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;“慢着！”，你嚷嚷起来了，“你这个骗子！你不是说过，矩阵就是运动吗？怎么这会矩阵又是坐标系了？”&lt;/p&gt;

&lt;p&gt;嗯，所以我说到了关键的一步。我并没有骗人，之所以矩阵又是运动，又是坐标系，那是因为——&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“运动等价于坐标系变换”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对不起，这话其实不准确，我只是想让你印象深刻。准确的说法是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“对象的变换等价于坐标系的变换”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;或者：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换。”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;说白了就是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“运动是相对的。”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;让我们想想，达成同一个变换的结果，比如把点(1, 1)变到点(2, 3)去，你可以有两种做法。第一，坐标系不动，点动，把(1, 1)点挪到(2, 3)去。第二，点不动，变坐标系，让x轴的度量（单位向量）变成原来的$$1\over2$$，让y轴的度量（单位向量）变成原先的$$\frac{1}{3}$$，这样点还是那个点，可是点的坐标就变成(2, 3)了。方式不同，结果一样。&lt;/p&gt;

&lt;p&gt;从第一个方式来看，那就是我前文中说的，把矩阵看成是运动描述，矩阵与向量相乘就是使向量（点）运动的过程。在这个方式下，&lt;/p&gt;

&lt;p&gt;$$Ma = b$$&lt;/p&gt;

&lt;p&gt;的意思是：
&lt;strong&gt;“向量a经过矩阵M所描述的变换，变成了向量b。”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而从第二个方式来看，矩阵M描述了一个坐标系，姑且也称之为M。那么：&lt;/p&gt;

&lt;p&gt;$$Ma = b$$&lt;/p&gt;

&lt;p&gt;的意思是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“有一个向量，它在坐标系M的度量下得到的度量结果向量为a，那么它在坐标系I的度量下，这个向量的度量结果是b。”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里的I是指单位矩阵，就是主对角线是1，其他为零的矩阵。&lt;/p&gt;

&lt;p&gt;而这两个方式本质上是等价的。&lt;/p&gt;

&lt;p&gt;我希望你务必理解这一点，因为这是本篇的关键。&lt;/p&gt;

&lt;p&gt;正因为是关键，所以我得再解释一下。&lt;/p&gt;

&lt;p&gt;在M为坐标系的意义下，如果把M放在一个向量a的前面，形成Ma的样式，我们可以认为这是对向量a的一个环境声明。它相当于是说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“注意了！这里有一个向量，它在坐标系M中度量，得到的度量结果可以表达为a。可是它在别的坐标系里度量的话，就会得到不同的结果。为了明确，我把M放在前面，让你明白，这是该向量在坐标系M中度量的结果。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;那么我们再看孤零零的向量$$b$$&lt;/p&gt;

&lt;p&gt;多看几遍，你没看出来吗？它其实不是$$b$$ 它是：&lt;/p&gt;

&lt;p&gt;$$Ib$$&lt;/p&gt;

&lt;p&gt;也就是说：“在单位坐标系，也就是我们通常说的直角坐标系I中，有一个向量，度量的结果是b。”&lt;/p&gt;

&lt;p&gt;而  $$Ma = Ib$$的意思就是说：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“在M坐标系里量出来的向量a，跟在I坐标系里量出来的向量b，其实根本就是一个向量啊！”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这哪里是什么乘法计算，根本就是身份识别嘛。&lt;/p&gt;

&lt;p&gt;从这个意义上我们重新理解一下向量。向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系（基）不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。因此，按道理来说，每写出一个向量的表示，都应该声明一下这个表示是在哪个坐标系中度量出来的。表示的方式，就是 Ma，也就是说，有一个向量，在M矩阵表示的坐标系中度量出来的结果为a。我们平时说一个向量是$$[2,3,5,7]^T$$，隐含着是说，这个向量在 I 坐标系中的度量结果是$$[2, 3, 5, 7]^T$$，因此，这个形式反而是一种简化了的特殊情况。&lt;/p&gt;

&lt;p&gt;注意到，M矩阵表示出来的那个坐标系，由一组基组成，而那组基也是由向量组成的，同样存在这组向量是在哪个坐标系下度量而成的问题。也就是说，表述一个矩阵的一般方法，也应该要指明其所处的基准坐标系。所谓M，其实是 $$IM$$，也就是说，M中那组基的度量是在 I 坐标系中得出的。从这个视角来看，M*N也不是什么矩阵乘法了，而是声明了一个在M坐标系中量出的另一个坐标系N，其中M本身是在I坐标系中度量出来的。&lt;/p&gt;

&lt;p&gt;回过头来说变换的问题。我刚才说，“固定坐标系下一个对象的变换等价于固定对象所处的坐标系变换”，那个“固定对象”我们找到了，就是那个向量。但是坐标系的变换呢？我怎么没看见？&lt;/p&gt;

&lt;p&gt;请看：&lt;/p&gt;

&lt;p&gt;$$ Ma = Ib$$&lt;/p&gt;

&lt;p&gt;我现在要变M为I，怎么变？对了，再前面乘以个$$M^{-1}$$，也就是M的逆矩阵。换句话说，你不是有一个坐标系M吗，现在我让它乘以个$$M^{-1}$$，变成I，这样一来的话，原来M坐标系中的a在I中一量，就得到b了。&lt;/p&gt;

&lt;p&gt;我建议你此时此刻拿起纸笔，画画图，求得对这件事情的理解。比如，你画一个坐标系，x轴上的衡量单位是2，y轴上的衡量单位是3，在这样一个坐标系里，坐标为(1，1)的那一点，实际上就是笛卡尔坐标系里的点(2,3)。而让它原形毕露的办法，就是把原来那个坐标系:
$$
\left[
\begin{matrix}
 2 &amp;amp;0  &lt;br /&gt;
 0 &amp;amp;3  &lt;br /&gt;
\end{matrix}
\right]
$$
的x方向度量缩小为原来的$$\frac{1}{2}$$，而y方向度量缩小为原来的$$\frac{1}{3}$$，这样一来坐标系就变成单位坐标系I了。保持点不变，那个向量现在就变成了(2, 3)了。&lt;/p&gt;

&lt;p&gt;怎么能够让“x方向度量缩小为原来的$$\frac{1}{2}$$，而y方向度量缩小为原来的$$\frac{1}{3}$$”呢？就是让原坐标系：&lt;/p&gt;

&lt;p&gt;$$
\left[
\begin{matrix}
 2 &amp;amp;0&lt;br /&gt;
 0 &amp;amp;3&lt;br /&gt;
 \end{matrix}
 \right]
$$&lt;/p&gt;

&lt;p&gt;被矩阵：&lt;/p&gt;

&lt;p&gt;$$
\left[
\begin{matrix}
 \frac{1}{2} &amp;amp;0&lt;br /&gt;
 0 &amp;amp; \frac{1}{3}&lt;br /&gt;
 \end{matrix}
 \right]
$$&lt;/p&gt;

&lt;p&gt;左乘。而这个矩阵就是原矩阵的逆矩阵。&lt;/p&gt;

&lt;p&gt;下面我们得出一个重要的结论：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“对坐标系施加变换的方法，就是让表示那个坐标系的矩阵与表示那个变化的矩阵相乘。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再一次的，矩阵的乘法变成了运动的施加。只不过，被施加运动的不再是向量，而是另一个坐标系。&lt;/p&gt;

&lt;p&gt;如果你觉得你还搞得清楚，请再想一下刚才已经提到的结论，矩阵M*N，一方面表明坐标系N在运动M下的变换结果，另一方面，把M当成N的前缀，当成N的环境描述，那么就是说，在M坐标系度量下，有另一个坐标系N。这个坐标系N如果放在I坐标系中度量，其结果为坐标系M*N。&lt;/p&gt;

&lt;p&gt;在这里，我实际上已经回答了一般人在学习线性代数是最困惑的一个问题，那就是为什么矩阵的乘法要规定成这样。简单地说，是因为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;从变换的观点看，对坐标系N施加M变换，就是把组成坐标系N的每一个向量施加M变换。&lt;/li&gt;
&lt;li&gt;从坐标系的观点看，在M坐标系中表现为N的另一个坐标系，这也归结为，对N坐标系基的每一个向量，把它在I坐标系中的坐标找出来，然后汇成一个新的矩阵。&lt;/li&gt;
&lt;li&gt;至于矩阵乘以向量为什么要那样规定，那是因为一个在M中度量为a的向量，如果想要恢复在I中的真像，就必须分别与M中的每一个向量进行內积运算。我把这个结论的推导留给感兴趣的朋友吧。应该说，其实到了这一步，已经很容易了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;综合以上1、2、3，矩阵的乘法就得那么规定，一切有根有据，绝不是哪个神经病胡思乱想出来的。&lt;/p&gt;

&lt;p&gt;我已经无法说得更多了。矩阵又是坐标系，又是变换。到底是坐标系，还是变换，已经说不清楚了，运动与实体在这里统一了，物质与意识的界限已经消失了，一切归于无法言说，无法定义了。道可道，非常道，名可名，非常名。矩阵是在是不可道之道，不可名之名的东西。到了这个时候，我们不得不承认，我们伟大的线性代数课本上说的矩阵定义，是无比正确的：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;“矩阵就是由m行n列数放在一起组成的数学对象。”&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;好了，这基本上就是我想说的全部了。还留下一个行列式的问题。矩阵M的行列式实际上是组成M的各个向量按照平行四边形法则搭成一个n维立方体的体积。对于这一点，我只能感叹于其精妙，却无法揭开其中奥秘了。也许我掌握的数学工具不够，我希望有人能够给我们大家讲解其中的道理了。&lt;/p&gt;

&lt;p&gt;我不知道是否讲得足够清楚了，反正这一部分需要您花些功夫去推敲。&lt;/p&gt;

&lt;p&gt;此外，请大家不必等待这个系列的后续部分。以我的工作情况而言，近期内很难保证继续投入脑力到这个领域中，尽管我仍然对此兴致浓厚。不过如果还有（四）的话，可能是一些站在应用层面的考虑，比如对计算机图形学相关算法的理解。但是我不承诺这些讨论近期内会出现了。&lt;/p&gt;

&lt;p&gt;以上内容转载自以下内容：
&lt;a href=&#34;http://blog.csdn.net/myan/article/details/647511&#34;&gt;理解矩阵一&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/myan/article/details/649018&#34;&gt;理解矩阵二&lt;/a&gt;
&lt;a href=&#34;http://blog.csdn.net/myan/article/details/1865397&#34;&gt;理解矩阵三&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>特征选择方法之卡方检验</title>
      <link>http://vrcoder.github.io/2016/06/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95%E4%B9%8B%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C/</link>
      <pubDate>Fri, 10 Jun 2016 01:19:34 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/2016/06/%E7%89%B9%E5%BE%81%E9%80%89%E6%8B%A9%E6%96%B9%E6%B3%95%E4%B9%8B%E5%8D%A1%E6%96%B9%E6%A3%80%E9%AA%8C/</guid>
      <description>&lt;p&gt;除了分类算法以外，为分类文本作处理的特征提取算法也对最终效果有巨大影响，而特征提取算法又分为特征选择和特征抽取两大类，其中特征选择算法有互信息，文档频率，信息增益，卡方检验等等十数种，这次先介绍特征选择算法中效果比较好的卡方检验方法。&lt;/p&gt;

&lt;p&gt;大家应该还记得，卡方检验(χ2，又称Chi-square)其实是数理统计中一种常用的检验两个变量独立性的方法。（什么？你是文史类专业的学生，没有学过数理统计？那你做什么文本分类？在这捣什么乱？）&lt;/p&gt;

&lt;p&gt;卡方检验最基本的思想就是通过观察实际值与理论值的偏差来确定理论的正确与否。具体做的时候常常先假设两个变量确实是独立的（行话就叫做“原假设”），然后观察实际值（也可以叫做观察值）与理论值（这个理论值是指“如果两者确实独立”的情况下应该有的值）的偏差程度，如果偏差足够小，我们就认为误差是很自然的样本误差，是测量手段不够精确导致或者偶然发生的，两者确确实实是独立的，此时就接受原假设；如果偏差大到一定程度，使得这样的误差不太可能是偶然产生或者测量不精确所致，我们就认为两者实际上是相关的，即否定原假设，而接受备择假设。&lt;/p&gt;

&lt;p&gt;那么用什么来衡量偏差程度呢？假设理论值为E（这也是数学期望的符号哦），实际值为x，如果仅仅使用所有样本的观察值与理论值的差值x-E之和&lt;/p&gt;

&lt;p&gt;$$\sum_i^n(x_i-E)$$&lt;/p&gt;

&lt;p&gt;来衡量，单个的观察值还好说，当有多个观察值x1，x2，x3的时候，很可能x1-E，x2-E，x3-E的值有正有负，因而互相抵消，使得最终的结果看上好像偏差为0，但实际上每个都有偏差，而且都还不小！此时很直接的想法便是使用方差代替均值，这样就解决了正负抵消的问题，即使用&lt;/p&gt;

&lt;p&gt;$$\sum_{i=1}^n(x_i-E)^2$$&lt;/p&gt;

&lt;p&gt;这时又引来了新的问题，对于500的均值来说，相差5其实是很小的（相差1%），而对20的均值来说，5相当于25%的差异，这是使用方差也无法体现的。因此应该考虑改进上面的式子，让均值的大小不影响我们对差异程度的判断&lt;/p&gt;

&lt;p&gt;$$\sum_{i=1}^n \frac{(x_i-E)^2}{E}       &amp;mdash;&amp;mdash;&amp;mdash;-式子（1）$$&lt;/p&gt;

&lt;p&gt;上面这个式子已经相当好了。实际上这个式子就是卡方检验使用的差值衡量公式。当提供了数个样本的观察值x1，x2，……xi，……xn之后，代入到式（1）中就可以求得开方值，用这个值与事先设定的阈值比较，如果大于阈值（即偏差很大），就认为原假设不成立，反之则认为原假设成立。&lt;/p&gt;

&lt;p&gt;在文本分类问题的特征选择阶段，我们主要关心一个词t（一个随机变量）与一个类别c（另一个随机变量）之间是否相互独立？如果独立，就可以说词t对类别c完全没有表征作用，即我们根本无法根据t出现与否来判断一篇文档是否属于c这个分类。但与最普通的卡方检验不同，我们不需要设定阈值，因为很难说词t和类别c关联到什么程度才算是有表征作用，我们只想借用这个方法来选出一些最最相关的即可。
此时我们仍然需要明白对特征选择来说原假设是什么，因为计算出的开方值越大，说明对原假设的偏离越大，我们越倾向于认为原假设的反面情况是正确的。我们能不能把原假设定为“词t与类别c相关“？原则上说当然可以，这也是一个健全的民主主义社会赋予每个公民的权利（笑），但此时你会发现根本不知道此时的理论值该是多少！你会把自己绕进死胡同。所以我们一般都使用”词t与类别c不相关“来做原假设。选择的过程也变成了为每个词计算它与类别c的开方值，从大到小排个序（此时开方值越大越相关），取前k个就可以（k值可以根据自己的需要选，这也是一个健全的民主主义社会赋予每个公民的权利）。&lt;/p&gt;

&lt;p&gt;好，原理有了，该来个例子说说到底怎么算了。&lt;/p&gt;

&lt;p&gt;比如说现在有N篇文档，其中有M篇是关于体育的，我们想考察一个词“篮球”与类别“体育”之间的相关性（任谁都看得出来两者很相关，但很遗憾，我们是智慧生物，计算机不是，它一点也看不出来，想让它认识到这一点，只能让它算算看）。我们有四个观察值可以使用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;包含“篮球”且属于“体育”类别的文档数，命名为A&lt;/li&gt;
&lt;li&gt;包含“篮球”但不属于“体育”类别的文档数，命名为B&lt;/li&gt;
&lt;li&gt;不包含“篮球”但却属于“体育”类别的文档数，命名为C&lt;/li&gt;
&lt;li&gt;既不包含“篮球”也不属于“体育”类别的文档数，命名为D&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用下面的表格更清晰：&lt;/p&gt;

&lt;table class=&#34;table table-bordered table-striped table-condensed&#34;&gt;
    &lt;tr&gt;
        &lt;th&gt;特征选择&lt;/th&gt;
        &lt;th&gt;属于“体育”&lt;/th&gt;
        &lt;th&gt;不属于“体育”&lt;/th&gt;
        &lt;th&gt;总计&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;包含“篮球”&lt;/td&gt;
        &lt;td&gt;A&lt;/td&gt;
        &lt;td&gt;B&lt;/td&gt;
        &lt;td&gt;A+B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;不包含“篮球”&lt;/td&gt;
        &lt;td&gt;C&lt;/td&gt;
        &lt;td&gt;D&lt;/td&gt;
        &lt;td&gt;C+D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;总数&lt;/td&gt;
        &lt;td&gt;A+C&lt;/td&gt;
        &lt;td&gt;B+D&lt;/td&gt;
        &lt;td&gt;N&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;如果有些特点你没看出来，那我说一说，首先，A+B+C+D=N（这，这不废话嘛）。其次，A+C的意思其实就是说“属于体育类的文章数量”，因此，它就等于M，同时，B+D就等于N-M。&lt;/p&gt;

&lt;p&gt;好，那么理论值是什么呢？以包含“篮球”且属于“体育”类别的文档数为例。如果原假设是成立的，即“篮球”和体育类文章没什么关联性，那么在所有的文章中，“篮球”这个词都应该是等概率出现，而不管文章是不是体育类的。这个概率具体是多少，我们并不知道，但他应该体现在观察结果中（就好比抛硬币的概率是二分之一，可以通过观察多次抛的结果来大致确定），因此我们可以说这个概率接近&lt;/p&gt;

&lt;p&gt;$$\frac{A+B}{N}$$&lt;/p&gt;

&lt;p&gt;（因为A+B是包含“篮球”的文章数，除以总文档数就是“篮球”出现的概率，当然，这里认为在一篇文章中出现即可，而不管出现了几次）而属于体育类的文章数为A+C，在这些个文档中，应该有&lt;/p&gt;

&lt;p&gt;$$E_{11} = (A+C)\frac{A+B}{N}$$&lt;/p&gt;

&lt;p&gt;篇包含“篮球”这个词（数量乘以概率嘛）。&lt;/p&gt;

&lt;p&gt;但实际有多少呢？考考你（读者：切，当然是A啦，表格里写着嘛……）。&lt;/p&gt;

&lt;p&gt;此时对这种情况的差值就得出了（套用式（1）的公式），应该是&lt;/p&gt;

&lt;p&gt;$$D_{11} = \frac{(A - E_11)^2 }{ E_11 }$$&lt;/p&gt;

&lt;p&gt;(公式的下角标解析有bug)&lt;/p&gt;

&lt;p&gt;同样，我们还可以计算剩下三种情况的差值D12，D21，D22，聪明的读者一定能自己算出来（读者：切，明明是自己懒得写了……）。有了所有观察值的差值，就可以计算“篮球”与“体育”类文章的开方值&lt;/p&gt;

&lt;p&gt;$$χ2(篮球,体育) = D_{11} + D_12 + D_21 + D_22$$&lt;/p&gt;

&lt;p&gt;(公式的下角标解析有bug)&lt;/p&gt;

&lt;p&gt;把D11，D12，D21，D22的值分别代入并化简，可以得到&lt;/p&gt;

&lt;p&gt;$$χ2(篮球,体育) = \frac{N(AD-BC)^2}{(A+C)(A+B)(B+D)(C+D)}$$&lt;/p&gt;

&lt;p&gt;词t与类别c的开方值更一般的形式可以写成&lt;/p&gt;

&lt;p&gt;$$χ2(t,c) =
\frac{N(AD-BC)^2}{(A+C)(A+B)(B+D)(C+D)}&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;式(2)$$&lt;/p&gt;

&lt;p&gt;接下来我们就可以计算其他词如“排球”，“产品”，“银行”等等与体育类别的开方值，然后根据大小来排序，选择我们需要的最大的数个词汇作为特征项就可以了。&lt;/p&gt;

&lt;p&gt;实际上式（2）还可以进一步化简，注意如果给定了一个文档集合（例如我们的训练集）和一个类别，则N，M，N-M（即A+C和B+D）对同一类别文档中的所有词来说都是一样的，而我们只关心一堆词对某个类别的开方值的大小顺序，而并不关心具体的值，因此把它们从式（2）中去掉是完全可以的，故实际计算的时候我们都使用
$$χ2(t,c) = \frac{(AD-BC)^2}{(A+B)(B+D)} &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;式(3)$$&lt;/p&gt;

&lt;p&gt;好啦，并不高深对不对？&lt;/p&gt;

&lt;p&gt;针对英文纯文本的实验结果表明：作为特征选择方法时，卡方检验和信息增益的效果最佳（相同的分类算法，使用不同的特征选择算法来得到比较结果）；文档频率方法的性能同前两者大体相当，术语强度方法性能一般；互信息方法的性能最差（文献[17]）。&lt;/p&gt;

&lt;p&gt;但卡方检验也并非就十全十美了。回头想想A和B的值是怎么得出来的，它统计文档中是否出现词t，却不管t在该文档中出现了几次，这会使得他对低频词有所偏袒（因为它夸大了低频词的作用）。甚至会出现有些情况，一个词在一类文章的每篇文档中都只出现了一次，其开方值却大过了在该类文章99%的文档中出现了10次的词，其实后面的词才是更具代表性的，但只因为它出现的文档数比前面的词少了“1”，特征选择的时候就可能筛掉后面的词而保留了前者。这就是卡方检验著名的“低频词缺陷“。因此卡方检验也经常同其他因素如词频综合考虑来扬长避短。&lt;/p&gt;

&lt;p&gt;好啦，关于卡方检验先说这么多，有机会还将介绍其他的特征选择算法。&lt;/p&gt;

&lt;p&gt;附：给精通统计学的同学多说几句，式（1）实际上是对连续型的随机变量的差值计算公式，而我们这里统计的“文档数量“显然是离散的数值（全是整数），因此真正在统计学中计算的时候，是有修正过程的，但这种修正仍然是只影响具体的开方值，而不影响大小的顺序，故文本分类中不做这种修正。&lt;/p&gt;

&lt;p&gt;原文地址：&lt;a href=&#34;http://www.blogjava.net/zhenandaci/archive/2008/08/31/225966.html&#34;&gt;http://www.blogjava.net/zhenandaci/archive/2008/08/31/225966.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://vrcoder.github.io/%E5%85%B3%E4%BA%8E%E6%88%91/</link>
      <pubDate>Wed, 08 Jun 2016 13:12:50 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/%E5%85%B3%E4%BA%8E%E6%88%91/</guid>
      <description>&lt;p&gt;我是官山山，山东德州人，2014年1月硕士毕业于哈尔滨工业大学深圳研究生院。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>http://vrcoder.github.io/privacy-policy/</link>
      <pubDate>Tue, 15 Mar 2016 18:21:33 -0700</pubDate>
      
      <guid>http://vrcoder.github.io/privacy-policy/</guid>
      <description>&lt;p&gt;Privacy policy here.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>