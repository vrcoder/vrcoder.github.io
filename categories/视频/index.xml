<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>视频 on 观山的世界</title>
    <link>http://vrcoder.github.io/categories/%E8%A7%86%E9%A2%91/</link>
    <description>Recent content in 视频 on 观山的世界</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2016 21:59:40 +0800</lastBuildDate>
    <atom:link href="http://vrcoder.github.io/categories/%E8%A7%86%E9%A2%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SDL学习笔记之Hello world</title>
      <link>http://vrcoder.github.io/2016/08/sdl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bhello-world/</link>
      <pubDate>Fri, 05 Aug 2016 21:59:40 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/2016/08/sdl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bhello-world/</guid>
      <description>

&lt;h2 id=&#34;什么是sdl:f3fc397938172c6e6799f93df0043ceb&#34;&gt;什么是SDL？&lt;/h2&gt;

&lt;p&gt;SDL，英文全称(Simple DirectMedia Layer), 是一套开放源代码的跨平台多媒体开发库。SDL提供了数种控制图像、声音输入输出的函数，目前多用于媒体播放器、游戏开发等多媒体应用领域。&lt;/p&gt;

&lt;p&gt;目前的稳定版本是2.0.4,与1.2.x版本接口差别很大。&lt;/p&gt;

&lt;p&gt;开始接触SDL主要是因为最近在看雷霄骅博士的文章&lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/article/details/38868499&#34;&gt;《最简单的基于FFMPEG+SDL的视频播放器 ver2 （采用SDL2.0）》&lt;/a&gt;，里面用到了很多SDL的东西，决定系统的了解下SDL。研究了两天，我最大的感受就是SDL使用简单方便，可以很轻松的绘制窗口、加载图片、视频等等。&lt;/p&gt;

&lt;h2 id=&#34;安装sdl:f3fc397938172c6e6799f93df0043ceb&#34;&gt;安装SDL&lt;/h2&gt;

&lt;p&gt;Ubuntu: sudo apt-get install libsdl2-dev
Mac: brew install sdl2
其他PC类似以上操作。&lt;/p&gt;

&lt;h2 id=&#34;sdl的hello-world:f3fc397938172c6e6799f93df0043ceb&#34;&gt;SDL的Hello world&lt;/h2&gt;

&lt;p&gt;学习内容主要参考&lt;a href=&#34;http://www.willusher.io/pages/sdl2/&#34;&gt;官方wiki上给的参考手册&lt;/a&gt;, 在此主要做一个简单的翻译和整理。直接贴代码，在代码上进行说明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;
#include &amp;lt;stdio.h&amp;gt;
// 引入头文件，地址根据安装地址结合Makefile地址而定
#include &amp;lt;SDL2/SDL.h&amp;gt;

/**
 * 主要功能：创建窗口并加载BMP图像
 */


int main(int argc, char *argv[])
{
    /**
     * SDL的初始化，参数可以根据使用需要加入各种不同的标志位。
     * 这里仅初始化音视频相关模块。
     * 如果视频模块被初始化了，那么事件处理系统会自动被初始化。
     * 文件IO和线程模块自动初始化。
     */
    if(SDL_Init(SDL_INIT_AUDIO|SDL_INIT_VIDEO)&amp;lt;0)
    {
        printf(&amp;quot;Unable to initialize SDL: %s \n&amp;quot;, SDL_GetError());
        exit(1);
    }

    /**
     * 创建窗口，用于显示渲染的图像。
     * 第一个参数是窗口的标题
     * 第二三个参数分别是窗口的x和y坐标
     * 第四五个参数是要绘制的窗口的宽度和高度
     * 最后一个参数是设置窗口的属性信息
     * 返回一个SDL_Window*, 若有错误返回NULL。
     * 相关参数可以查看WIKI的接口说明：http://wiki.libsdl.org/SDL_CreateWindow
     */
    SDL_Window *win = SDL_CreateWindow(&amp;quot;Hello, world!&amp;quot;, 100, 100, 640,480,SDL_WINDOW_SHOWN);
    if(win == NULL) {
        printf(&amp;quot;SDL_CreateWindow Error: %s \n&amp;quot;, SDL_GetError());
        SDL_Quit();
        return 1;
    }

    /**
     * 初始化渲染上下文。
     * 第一个参数与窗口建立关联
     * 第二个参数指定渲染驱动，如果是-1的话，就初始化满足标志位需求的第一个
     * 第三个参数标志位用来指定我们想要哪种渲染器
     * 返回一个SDL_Renderer*, 若有错误返回NULL
     * 相关参数可以查看WIKI的接口说明：http://wiki.libsdl.org/SDL_CreateRenderer 
     */

    SDL_Renderer *ren = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    if (ren == NULL) {
        SDL_DestroyWindow(win);

        printf(&amp;quot;SDL_CreateRenderer Error: %s \n&amp;quot;, SDL_GetError());
        SDL_Quit();
        return 1;
    }

    /**
     * 加载本地BMP图片，返回一个Surface。
     * SDL只提供了BMP图片的加载，要加载其他图片，可以使用扩展库SDL_image
     * 若返回NULL，则以此回收和释放上面申请的内存空间，并关闭SDL。下同
     */
    SDL_Surface *bmp = SDL_LoadBMP(&amp;quot;test.bmp&amp;quot;);
    if(bmp == NULL) {
        SDL_DestroyRenderer(ren);
        SDL_DestroyWindow(win);
        printf(&amp;quot;SDL_LoadBMP Error: %s\n&amp;quot;, SDL_GetError());
        SDL_Quit();
        return 1;
    }

    /**
     * 根据Surface创建纹理，然后释放Surface，释放内存
     */
    SDL_Texture *tex = SDL_CreateTextureFromSurface(ren, bmp);
    SDL_FreeSurface(bmp);
    if(tex == NULL) {
        SDL_DestroyRenderer(ren);
        SDL_DestroyWindow(win);
        printf(&amp;quot;SDL_CreateTextureFromSurface Error: %s \n&amp;quot;, SDL_GetError());
        SDL_Quit();
        return 1;
    }

    /**
     * 使纹理显示在屏幕上
     * 分三步：1. 清空渲染器；2. 渲染纹理；3.显示纹理
     * 使用了延迟让图片在窗口关闭前显示
     * 后续会有Event处理机制来更好的处理此类问题
     */
    for (int i = 0; i &amp;lt; 3; ++i) {
        SDL_RenderClear(ren);
        // 此时让整个图片充满整个窗口，所以后两个参数为空。
        // 可以根据后两个参数指定图片位置，后面再整理相关demo说明
        SDL_RenderCopy(ren, tex, NULL, NULL);
        SDL_RenderPresent(ren);
        // 设置1000毫秒的延迟，否则窗口会立马关闭，导致看不到图像
        SDL_Delay(1000);
    }
    /**
     * 释放各种指针并退出SDL
     */
    SDL_DestroyTexture(tex);
    SDL_DestroyRenderer(ren);
    SDL_DestroyWindow(win);
    SDL_Quit();
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单配个Makefile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCPATH=-I /usr/include
LIBPATH=-L /usr/lib
FLAG=-lSDL2main -lSDL2 -std=c++11

all:
	gcc -o main main.cpp $(FLAG) $(INCPATH) $(LIBPATH)
clean:
	rm -rf main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完整程序会在github上更新：&lt;a href=&#34;https://github.com/vrcoder/learning_SDL&#34;&gt;https://github.com/vrcoder/learning_SDL&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料:f3fc397938172c6e6799f93df0043ceb&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://baike.baidu.com/subview/8348/16851095.htm#viewPageContent&#34;&gt;SDL百度百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/&#34;&gt;雷霄骅博客地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://libsdl.org/&#34;&gt;SDL官方页面&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.libsdl.org/&#34;&gt;API使用说明&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>rtmp服务器搭建以及推流程序demo</title>
      <link>http://vrcoder.github.io/2016/06/rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%8E%A8%E6%B5%81%E7%A8%8B%E5%BA%8Fdemo/</link>
      <pubDate>Tue, 21 Jun 2016 22:03:16 +0800</pubDate>
      
      <guid>http://vrcoder.github.io/2016/06/rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E6%8E%A8%E6%B5%81%E7%A8%8B%E5%BA%8Fdemo/</guid>
      <description>

&lt;p&gt;汇总下前段时间用的工具：使用开源程序SRS和ffmpeg搭建推流程序的demo。&lt;/p&gt;

&lt;h2 id=&#34;准备工作:8da16a0d8489cde3951ef0acdde70416&#34;&gt;准备工作&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux服务器一台&lt;/li&gt;
&lt;li&gt;git（apt-get or yum install git）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/smartdu/srs&#34;&gt;srs开源程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ffmpeg.org/download.html&#34;&gt;ffmpeg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装srs:8da16a0d8489cde3951ef0acdde70416&#34;&gt;安装srs&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;git &lt;a href=&#34;https://github.com/smartdu/srs.git&#34;&gt;https://github.com/smartdu/srs.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd srs/trunk&lt;/li&gt;
&lt;li&gt;./configure &amp;amp;&amp;amp; make&lt;/li&gt;
&lt;li&gt;./objs/srs -c conf/srs.conf&lt;/li&gt;
&lt;li&gt;其他详见项目&lt;a href=&#34;https://github.com/ossrs/srs/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;安装ffmpeg:8da16a0d8489cde3951ef0acdde70416&#34;&gt;安装ffmpeg&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;git clone &lt;a href=&#34;https://git.ffmpeg.org/ffmpeg.git&#34;&gt;https://git.ffmpeg.org/ffmpeg.git&lt;/a&gt; ffmpeg&lt;/li&gt;
&lt;li&gt;安装yasm(apt-get or yum install yasm)&lt;/li&gt;
&lt;li&gt;./configure &amp;ndash;enable-shared &amp;ndash;prefix=/usr/local/ffmpeg&lt;/li&gt;
&lt;li&gt;make &amp;amp;&amp;amp; make install&lt;/li&gt;
&lt;li&gt;vim /etc/ld.so.conf.d/libc.conf,添加/usr/local/ffmpeg/lib
路径根据不同系统可能有差异&lt;/li&gt;
&lt;li&gt;ldconfig,使上面的改动生效&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;推流demo:8da16a0d8489cde3951ef0acdde70416&#34;&gt;推流demo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/leixiaohua1020/article/details/39803457&#34;&gt;代码来自雷霄骅博士的博客&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;/**
 * 最简单的基于FFmpeg的推流器（推送RTMP）
 * Simplest FFmpeg Streamer (Send RTMP)
 * 
 * 雷霄骅 Lei Xiaohua
 * leixiaohua1020@126.com
 * 中国传媒大学/数字电视技术
 * Communication University of China / Digital TV Technology
 * http://blog.csdn.net/leixiaohua1020
 * 
 * 本例子实现了推送本地视频至流媒体服务器（以RTMP为例）。
 * 是使用FFmpeg进行流媒体推送最简单的教程。
 *
 * This example stream local media files to streaming media 
 * server (Use RTMP as example). 
 * It&#39;s the simplest FFmpeg streamer.
 * 
 */

#include &amp;lt;stdio.h&amp;gt;

#define __STDC_CONSTANT_MACROS

#ifdef _WIN32
//Windows
extern &amp;quot;C&amp;quot;
{
#include &amp;quot;libavformat/avformat.h&amp;quot;
#include &amp;quot;libavutil/mathematics.h&amp;quot;
#include &amp;quot;libavutil/time.h&amp;quot;
};
#else
//Linux...
#ifdef __cplusplus
extern &amp;quot;C&amp;quot;
{
#endif
#include &amp;lt;libavformat/avformat.h&amp;gt;
#include &amp;lt;libavutil/mathematics.h&amp;gt;
#include &amp;lt;libavutil/time.h&amp;gt;
#ifdef __cplusplus
};
#endif
#endif

int main(int argc, char* argv[])
{
	AVOutputFormat *ofmt = NULL;
	//输入对应一个AVFormatContext，输出对应一个AVFormatContext
	//（Input AVFormatContext and Output AVFormatContext）
	AVFormatContext *ifmt_ctx = NULL, *ofmt_ctx = NULL;
	AVPacket pkt;
	const char *in_filename, *out_filename;
	int ret, i;
	int videoindex=-1;
	int frame_index=0;
	int64_t start_time=0;
	//in_filename  = &amp;quot;cuc_ieschool.mov&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.mkv&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.ts&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.mp4&amp;quot;;
	//in_filename  = &amp;quot;cuc_ieschool.h264&amp;quot;;
	in_filename  = &amp;quot;cuc_ieschool.flv&amp;quot;;//输入URL（Input file URL）
	//in_filename  = &amp;quot;shanghai03_p.h264&amp;quot;;
	
	out_filename = &amp;quot;rtmp://localhost/publishlive/livestream&amp;quot;;//输出 URL（Output URL）[RTMP]
	//out_filename = &amp;quot;rtp://233.233.233.233:6666&amp;quot;;//输出 URL（Output URL）[UDP]

	av_register_all();
	//Network
	avformat_network_init();
	//输入（Input）
	if ((ret = avformat_open_input(&amp;amp;ifmt_ctx, in_filename, 0, 0)) &amp;lt; 0) {
		printf( &amp;quot;Could not open input file.&amp;quot;);
		goto end;
	}
	if ((ret = avformat_find_stream_info(ifmt_ctx, 0)) &amp;lt; 0) {
		printf( &amp;quot;Failed to retrieve input stream information&amp;quot;);
		goto end;
	}

	for(i=0; i&amp;lt;ifmt_ctx-&amp;gt;nb_streams; i++) 
		if(ifmt_ctx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type==AVMEDIA_TYPE_VIDEO){
			videoindex=i;
			break;
		}

	av_dump_format(ifmt_ctx, 0, in_filename, 0);

	//输出（Output）
	
	avformat_alloc_output_context2(&amp;amp;ofmt_ctx, NULL, &amp;quot;flv&amp;quot;, out_filename); //RTMP
	//avformat_alloc_output_context2(&amp;amp;ofmt_ctx, NULL, &amp;quot;mpegts&amp;quot;, out_filename);//UDP

	if (!ofmt_ctx) {
		printf( &amp;quot;Could not create output context\n&amp;quot;);
		ret = AVERROR_UNKNOWN;
		goto end;
	}
	ofmt = ofmt_ctx-&amp;gt;oformat;
	for (i = 0; i &amp;lt; ifmt_ctx-&amp;gt;nb_streams; i++) {
		//根据输入流创建输出流（Create output AVStream according to input AVStream）
		AVStream *in_stream = ifmt_ctx-&amp;gt;streams[i];
		AVStream *out_stream = avformat_new_stream(ofmt_ctx, in_stream-&amp;gt;codec-&amp;gt;codec);
		if (!out_stream) {
			printf( &amp;quot;Failed allocating output stream\n&amp;quot;);
			ret = AVERROR_UNKNOWN;
			goto end;
		}
		//复制AVCodecContext的设置（Copy the settings of AVCodecContext）
		ret = avcodec_copy_context(out_stream-&amp;gt;codec, in_stream-&amp;gt;codec);
		if (ret &amp;lt; 0) {
			printf( &amp;quot;Failed to copy context from input to output stream codec context\n&amp;quot;);
			goto end;
		}
		out_stream-&amp;gt;codec-&amp;gt;codec_tag = 0;
		if (ofmt_ctx-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_GLOBALHEADER)
			out_stream-&amp;gt;codec-&amp;gt;flags |= CODEC_FLAG_GLOBAL_HEADER;
	}
	//Dump Format------------------
	av_dump_format(ofmt_ctx, 0, out_filename, 1);
	//打开输出URL（Open output URL）
	if (!(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) {
		ret = avio_open(&amp;amp;ofmt_ctx-&amp;gt;pb, out_filename, AVIO_FLAG_WRITE);
		if (ret &amp;lt; 0) {
			printf( &amp;quot;Could not open output URL &#39;%s&#39;&amp;quot;, out_filename);
			goto end;
		}
	}
	//写文件头（Write file header）
	ret = avformat_write_header(ofmt_ctx, NULL);
	if (ret &amp;lt; 0) {
		printf( &amp;quot;Error occurred when opening output URL\n&amp;quot;);
		goto end;
	}

	start_time=av_gettime();
	while (1) {
		AVStream *in_stream, *out_stream;
		//获取一个AVPacket（Get an AVPacket）
		ret = av_read_frame(ifmt_ctx, &amp;amp;pkt);
		if (ret &amp;lt; 0)
			break;
		//FIX：No PTS (Example: Raw H.264)
		//Simple Write PTS
		if(pkt.pts==AV_NOPTS_VALUE){
			//Write PTS
			AVRational time_base1=ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;time_base;
			//Duration between 2 frames (us)
			int64_t calc_duration=(double)AV_TIME_BASE/av_q2d(ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;r_frame_rate);
			//Parameters
			pkt.pts=(double)(frame_index*calc_duration)/(double)(av_q2d(time_base1)*AV_TIME_BASE);
			pkt.dts=pkt.pts;
			pkt.duration=(double)calc_duration/(double)(av_q2d(time_base1)*AV_TIME_BASE);
		}
		//Important:Delay
		if(pkt.stream_index==videoindex){
			AVRational time_base=ifmt_ctx-&amp;gt;streams[videoindex]-&amp;gt;time_base;
			AVRational time_base_q={1,AV_TIME_BASE};
			int64_t pts_time = av_rescale_q(pkt.dts, time_base, time_base_q);
			int64_t now_time = av_gettime() - start_time;
			if (pts_time &amp;gt; now_time)
				av_usleep(pts_time - now_time);

		}

		in_stream  = ifmt_ctx-&amp;gt;streams[pkt.stream_index];
		out_stream = ofmt_ctx-&amp;gt;streams[pkt.stream_index];
		/* copy packet */
		//转换PTS/DTS（Convert PTS/DTS）
		pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base, (AVRounding)(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.duration = av_rescale_q(pkt.duration, in_stream-&amp;gt;time_base, out_stream-&amp;gt;time_base);
		pkt.pos = -1;
		//Print to Screen
		if(pkt.stream_index==videoindex){
			printf(&amp;quot;Send %8d video frames to output URL\n&amp;quot;,frame_index);
			frame_index++;
		}
		//ret = av_write_frame(ofmt_ctx, &amp;amp;pkt);
		ret = av_interleaved_write_frame(ofmt_ctx, &amp;amp;pkt);

		if (ret &amp;lt; 0) {
			printf( &amp;quot;Error muxing packet\n&amp;quot;);
			break;
		}
		
		av_free_packet(&amp;amp;pkt);
		
	}
	//写文件尾（Write file trailer）
	av_write_trailer(ofmt_ctx);
end:
	avformat_close_input(&amp;amp;ifmt_ctx);
	/* close output */
	if (ofmt_ctx &amp;amp;&amp;amp; !(ofmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE))
		avio_close(ofmt_ctx-&amp;gt;pb);
	avformat_free_context(ofmt_ctx);
	if (ret &amp;lt; 0 &amp;amp;&amp;amp; ret != AVERROR_EOF) {
		printf( &amp;quot;Error occurred.\n&amp;quot;);
		return -1;
	}
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;简单写个Makefile来编译下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INCPATH=-I /usr/local/ffmpeg/include
LIBPATH=-L /usr/local/ffmpeg/lib
FLAGS=-lavformat -lavcodec -lavutil

all:
        gcc simplest_ffmpeg_streamer.cpp -g -o main $(INCPATH) $(LIBPATH) $(FLAGS)
clean:
        rm -rf main

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>